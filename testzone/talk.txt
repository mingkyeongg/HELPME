ok?dline
rl_clear_history
rl_on_new_line,
rl_replace_line
rl_redisplay
add_history,
printf
malloc
free
write
access
open
read,
close
fork
wait
waitpid
wait3
wait4
signal,
sigaction
sigemptyset
sigaddset
kill
exit,
getcwd
chdir
stat
lstat
fstat
unlink
execve,
dup
dup2
pipe
opendir
readdir
closedir,
strerror
perror
isatty
ttyname
ttyslot
ioctl,
getenv
tcsetattr
tcgetattr
tgetent
tgetflag,
tgetnum
tgetstr
tgoto
tputs


// run_command
// fork check
    // parent

    // -> fork
    // child
        // -> fork
        // child
            // redirection handling -> token NULL and PIPE check return
            // make_args, front -> if pipe? or NULL return args
            // mv_cmd -> pipe or NULL
            // front
        //parent
            // redirection handling -> token NULL and PIPE check return
            // make_args, front -> if pipe? or NULL return args

    // parent -> mv_cmd ret check
        // call run_command -> PIPE
        // return -> NULL

int pids[];
int cmd_count;

void redir() {
    default:
        dup2(fds[0], 0);
        dup2(fds[1], 1);
    else:
        int fd = open();
        dup2(fd, 0 || 1);
}

void pipe_run(current) {
    int fds[2];
    pipe(fds);

    int pid = fork();
    pids[i] = pid;
    if (pid == 0) {
        redir();

        execve();
    }
    pipe_run(next);
}



void total_run()
{
    if (builtin && cmd_count == 1) {
        builtin_func(); // exit status change -> $?
        return;
    }

    // echo hello | cat -e | cat
    pipe_run();

    int status;
    for (int i = 0; i < cmd_count; i++) {
        waitpid(pids[i], &status, 0);
    }

    $? = WEXITSTATUS(status);
    // WIFSIGNALED
    // WTERMSIG

    for (int i = 0; i < cmd_count; i++) {
        int pid = wait(&status);
        if (pid == pids[cmd_count - 1]) {
            $? = WEXITSTATUS(status);
        }
    }
}

echo hello > special | << eof < infile cat
기다려주는건 입력만, 그전까지 명령수행 X 맨앞에서
# 히어독 << 반복으로 체크 
<< eof  << 토큰에서 저장! 왜? 리다이렉션에서 같이 처리
fd redirection까지 들고 있다가! 존재하면 넘겨
